# React Native Apple UI Style Guidelines

## **Design System Principles**
- Follow Apple's Human Interface Guidelines
- Maintain consistent spacing using 8pt grid system
- Use semantic colors and typography
- Implement proper accessibility standards
- Prioritize performance and smooth animations

```typescript
// ✅ DO: Create a comprehensive design system
export const DesignSystem = {
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
    xxl: 48,
  },
  colors: {
    primary: '#007AFF',
    secondary: '#5856D6',
    success: '#34C759',
    warning: '#FF9500',
    error: '#FF3B30',
    background: {
      primary: '#FFFFFF',
      secondary: '#F2F2F7',
      tertiary: '#FFFFFF',
    },
    text: {
      primary: '#000000',
      secondary: '#3C3C43',
      tertiary: '#3C3C4399',
      quaternary: '#3C3C434D',
    },
    separator: '#3C3C434A',
  },
  typography: {
    largeTitle: { fontSize: 34, fontWeight: '700' },
    title1: { fontSize: 28, fontWeight: '700' },
    title2: { fontSize: 22, fontWeight: '700' },
    title3: { fontSize: 20, fontWeight: '600' },
    headline: { fontSize: 17, fontWeight: '600' },
    body: { fontSize: 17, fontWeight: '400' },
    callout: { fontSize: 16, fontWeight: '400' },
    subhead: { fontSize: 15, fontWeight: '400' },
    footnote: { fontSize: 13, fontWeight: '400' },
    caption1: { fontSize: 12, fontWeight: '400' },
    caption2: { fontSize: 11, fontWeight: '400' },
  },
} as const;
```

## **Component Architecture**
- Create reusable, composable components
- Use compound component patterns
- Implement proper prop interfaces
- Follow single responsibility principle
- Use proper TypeScript generic constraints

```typescript
// ✅ DO: Compound component pattern for complex UI
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'tertiary';
  size?: 'small' | 'medium' | 'large';
  isLoading?: boolean;
  disabled?: boolean;
  children: React.ReactNode;
  onPress: () => void;
}

export const Button: React.FC<ButtonProps> & {
  Icon: typeof ButtonIcon;
  Text: typeof ButtonText;
} = ({ variant = 'primary', size = 'medium', ...props }) => {
  const styles = useButtonStyles(variant, size);
  
  return (
    <Pressable
      style={({ pressed }) => [
        styles.container,
        pressed && styles.pressed,
        props.disabled && styles.disabled,
      ]}
      onPress={props.onPress}
      disabled={props.disabled || props.isLoading}
      accessibilityRole="button"
      accessibilityState={{ disabled: props.disabled }}
    >
      {props.children}
    </Pressable>
  );
};

const ButtonIcon: React.FC<{ name: string; size?: number }> = ({ name, size = 16 }) => (
  <Icon name={name} size={size} />
);

const ButtonText: React.FC<{ children: string }> = ({ children }) => (
  <Text style={styles.text}>{children}</Text>
);

Button.Icon = ButtonIcon;
Button.Text = ButtonText;

// Usage:
<Button onPress={handlePress}>
  <Button.Icon name="plus" />
  <Button.Text>Add Item</Button.Text>
</Button>
```

## **Layout & Spacing**
- Use Flexbox for all layouts
- Implement proper safe area handling
- Follow 8pt grid system
- Use semantic spacing tokens
- Avoid hardcoded values

```typescript
// ✅ DO: Semantic layout components
export const Layout = {
  Container: styled.View<{ padding?: keyof typeof DesignSystem.spacing }>`
    flex: 1;
    background-color: ${DesignSystem.colors.background.primary};
    padding: ${({ padding = 'md' }) => DesignSystem.spacing[padding]}px;
  `,
  
  Stack: styled.View<{ 
    spacing?: keyof typeof DesignSystem.spacing;
    direction?: 'row' | 'column';
    align?: 'flex-start' | 'center' | 'flex-end' | 'stretch';
    justify?: 'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-around';
  }>`
    flex-direction: ${({ direction = 'column' }) => direction};
    align-items: ${({ align = 'stretch' }) => align};
    justify-content: ${({ justify = 'flex-start' }) => justify};
    gap: ${({ spacing = 'md' }) => DesignSystem.spacing[spacing]}px;
  `,
  
  SafeArea: styled(SafeAreaView)`
    flex: 1;
    background-color: ${DesignSystem.colors.background.primary};
  `,
};

// ✅ DO: Responsive spacing hooks
export const useResponsiveSpacing = () => {
  const { width } = useWindowDimensions();
  
  return {
    horizontal: width > 768 ? DesignSystem.spacing.xl : DesignSystem.spacing.md,
    vertical: width > 768 ? DesignSystem.spacing.lg : DesignSystem.spacing.md,
  };
};
```

## **Typography & Text Styling**
- Use semantic text components
- Implement proper font scaling
- Support accessibility font sizes
- Use proper color contrast ratios
- Implement proper line heights

```typescript
// ✅ DO: Semantic typography components
interface TextProps extends TextComponentProps {
  variant?: keyof typeof DesignSystem.typography;
  color?: 'primary' | 'secondary' | 'tertiary' | 'quaternary';
  align?: 'left' | 'center' | 'right';
  numberOfLines?: number;
}

export const Text: React.FC<TextProps> = ({
  variant = 'body',
  color = 'primary',
  align = 'left',
  ...props
}) => {
  const typography = DesignSystem.typography[variant];
  const textColor = DesignSystem.colors.text[color];
  
  return (
    <TextComponent
      style={[
        {
          ...typography,
          color: textColor,
          textAlign: align,
          lineHeight: typography.fontSize * 1.2,
        },
        props.style,
      ]}
      allowFontScaling={true}
      maxFontSizeMultiplier={1.3}
      {...props}
    />
  );
};

// ✅ DO: Specialized text components
export const Title = (props: Omit<TextProps, 'variant'>) => (
  <Text variant="title1" {...props} />
);

export const Subtitle = (props: Omit<TextProps, 'variant'>) => (
  <Text variant="title3" color="secondary" {...props} />
);

export const Caption = (props: Omit<TextProps, 'variant'>) => (
  <Text variant="caption1" color="tertiary" {...props} />
);
```

## **Gestures & Interactions**
- Use native gesture handling
- Implement proper haptic feedback
- Provide visual feedback for interactions
- Support accessibility gestures
- Use appropriate animation curves

```typescript
// ✅ DO: Enhanced interaction components
export const InteractiveCard: React.FC<{
  children: React.ReactNode;
  onPress?: () => void;
  onLongPress?: () => void;
}> = ({ children, onPress, onLongPress }) => {
  const scaleAnim = useSharedValue(1);
  const opacityAnim = useSharedValue(1);
  
  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scaleAnim.value }],
    opacity: opacityAnim.value,
  }));
  
  const handlePressIn = () => {
    scaleAnim.value = withSpring(0.98, { damping: 15, stiffness: 400 });
    opacityAnim.value = withSpring(0.8, { damping: 15, stiffness: 400 });
    
    if (Platform.OS === 'ios') {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
  };
  
  const handlePressOut = () => {
    scaleAnim.value = withSpring(1, { damping: 15, stiffness: 400 });
    opacityAnim.value = withSpring(1, { damping: 15, stiffness: 400 });
  };
  
  return (
    <Pressable
      onPress={onPress}
      onLongPress={onLongPress}
      onPressIn={handlePressIn}
      onPressOut={handlePressOut}
      delayLongPress={500}
    >
      <Animated.View style={[styles.card, animatedStyle]}>
        {children}
      </Animated.View>
    </Pressable>
  );
};
```

## **Navigation & Flow**
- Use stack-based navigation patterns
- Implement proper transitions
- Follow iOS navigation conventions
- Use appropriate modal presentations
- Support gesture-based navigation

```typescript
// ✅ DO: Consistent navigation configuration
export const NavigationTheme: Theme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    primary: DesignSystem.colors.primary,
    background: DesignSystem.colors.background.primary,
    card: DesignSystem.colors.background.primary,
    text: DesignSystem.colors.text.primary,
    border: DesignSystem.colors.separator,
  },
};

export const createStackNavigator = () => {
  const Stack = createNativeStackNavigator();
  
  const defaultOptions: NativeStackNavigationOptions = {
    headerStyle: {
      backgroundColor: DesignSystem.colors.background.primary,
    },
    headerTitleStyle: {
      ...DesignSystem.typography.headline,
      color: DesignSystem.colors.text.primary,
    },
    headerBackTitleVisible: false,
    gestureEnabled: true,
    animation: 'slide_from_right',
  };
  
  return { Stack, defaultOptions };
};

// ✅ DO: Modal presentation patterns
export const useModalPresentation = () => {
  const showModal = useCallback((content: React.ReactNode) => {
    // Implementation for modal presentation
  }, []);
  
  const showActionSheet = useCallback((options: ActionSheetOption[]) => {
    // Implementation for action sheet
  }, []);
  
  return { showModal, showActionSheet };
};
```

## **Forms & Input Handling**
- Use controlled components
- Implement proper validation
- Provide real-time feedback
- Support accessibility labels
- Use semantic keyboard types

```typescript
// ✅ DO: Enhanced form input components
interface InputProps extends TextInputProps {
  label?: string;
  error?: string;
  hint?: string;
  leftIcon?: string;
  rightIcon?: string;
  variant?: 'default' | 'search' | 'secure';
}

export const Input: React.FC<InputProps> = ({
  label,
  error,
  hint,
  leftIcon,
  rightIcon,
  variant = 'default',
  ...props
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  
  const borderColor = error 
    ? DesignSystem.colors.error 
    : isFocused 
    ? DesignSystem.colors.primary 
    : DesignSystem.colors.separator;
    
  return (
    <Layout.Stack spacing="xs">
      {label && <Text variant="subhead" color="secondary">{label}</Text>}
      
      <View style={[styles.inputContainer, { borderColor }]}>
        {leftIcon && <Icon name={leftIcon} size={20} />}
        
        <TextInput
          style={styles.input}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          secureTextEntry={variant === 'secure' && !showPassword}
          accessibilityLabel={label}
          accessibilityHint={hint}
          {...props}
        />
        
        {variant === 'secure' && (
          <Pressable onPress={() => setShowPassword(!showPassword)}>
            <Icon name={showPassword ? 'eye-off' : 'eye'} size={20} />
          </Pressable>
        )}
        
        {rightIcon && <Icon name={rightIcon} size={20} />}
      </View>
      
      {error && <Text variant="caption1" color="error">{error}</Text>}
      {hint && !error && <Text variant="caption1" color="tertiary">{hint}</Text>}
    </Layout.Stack>
  );
};
```

## **Lists & Data Display**
- Use FlatList for performance
- Implement proper key extraction
- Add loading and empty states
- Support pull-to-refresh
- Use appropriate item separators

```typescript
// ✅ DO: Optimized list components
interface ListProps<T> {
  data: T[];
  renderItem: (item: T, index: number) => React.ReactElement;
  onRefresh?: () => Promise<void>;
  onEndReached?: () => void;
  isLoading?: boolean;
  emptyMessage?: string;
  keyExtractor?: (item: T, index: number) => string;
}

export function List<T extends { id: string }>({
  data,
  renderItem,
  onRefresh,
  onEndReached,
  isLoading = false,
  emptyMessage = 'No items found',
  keyExtractor = (item) => item.id,
}: ListProps<T>) {
  const [refreshing, setRefreshing] = useState(false);
  
  const handleRefresh = useCallback(async () => {
    if (onRefresh) {
      setRefreshing(true);
      await onRefresh();
      setRefreshing(false);
    }
  }, [onRefresh]);
  
  const ItemSeparator = useCallback(() => (
    <View style={styles.separator} />
  ), []);
  
  const EmptyComponent = useCallback(() => (
    <Layout.Stack spacing="md" align="center" style={styles.emptyContainer}>
      <Text variant="subhead" color="secondary" align="center">
        {emptyMessage}
      </Text>
    </Layout.Stack>
  ), [emptyMessage]);
  
  const FooterComponent = useCallback(() => (
    isLoading ? (
      <View style={styles.loadingFooter}>
        <ActivityIndicator size="small" color={DesignSystem.colors.primary} />
      </View>
    ) : null
  ), [isLoading]);
  
  return (
    <FlatList
      data={data}
      renderItem={({ item, index }) => renderItem(item, index)}
      keyExtractor={keyExtractor}
      ItemSeparatorComponent={ItemSeparator}
      ListEmptyComponent={EmptyComponent}
      ListFooterComponent={FooterComponent}
      refreshing={refreshing}
      onRefresh={onRefresh ? handleRefresh : undefined}
      onEndReached={onEndReached}
      onEndReachedThreshold={0.1}
      removeClippedSubviews={true}
      maxToRenderPerBatch={10}
      windowSize={10}
      showsVerticalScrollIndicator={false}
    />
  );
}
```

## **Animations & Micro-interactions**
- Use Reanimated 3 for complex animations
- Implement spring-based animations
- Add entrance/exit animations
- Use appropriate easing curves
- Optimize for 60fps performance

```typescript
// ✅ DO: Reusable animation hooks
export const useAnimations = () => {
  const fadeIn = useCallback((value: SharedValue<number>, duration = 300) => {
    value.value = withTiming(1, { duration, easing: Easing.ease });
  }, []);
  
  const slideInFromBottom = useCallback((value: SharedValue<number>, duration = 300) => {
    value.value = withSpring(0, {
      damping: 15,
      stiffness: 400,
      mass: 1,
    });
  }, []);
  
  const scaleIn = useCallback((value: SharedValue<number>, duration = 300) => {
    value.value = withSpring(1, {
      damping: 12,
      stiffness: 500,
      mass: 0.8,
    });
  }, []);
  
  return { fadeIn, slideInFromBottom, scaleIn };
};

// ✅ DO: Animated presence component
export const AnimatedPresence: React.FC<{
  visible: boolean;
  children: React.ReactNode;
  animation?: 'fade' | 'slide' | 'scale';
}> = ({ visible, children, animation = 'fade' }) => {
  const opacity = useSharedValue(0);
  const translateY = useSharedValue(20);
  const scale = useSharedValue(0.95);
  
  useEffect(() => {
    if (visible) {
      opacity.value = withTiming(1, { duration: 200 });
      translateY.value = withSpring(0);
      scale.value = withSpring(1);
    } else {
      opacity.value = withTiming(0, { duration: 150 });
      translateY.value = withTiming(20, { duration: 150 });
      scale.value = withTiming(0.95, { duration: 150 });
    }
  }, [visible]);
  
  const animatedStyle = useAnimatedStyle(() => {
    switch (animation) {
      case 'slide':
        return {
          opacity: opacity.value,
          transform: [{ translateY: translateY.value }],
        };
      case 'scale':
        return {
          opacity: opacity.value,
          transform: [{ scale: scale.value }],
        };
      default:
        return { opacity: opacity.value };
    }
  });
  
  if (!visible && opacity.value === 0) {
    return null;
  }
  
  return (
    <Animated.View style={animatedStyle}>
      {children}
    </Animated.View>
  );
};
```

## **Performance Optimization**
- Use React.memo for expensive components
- Implement proper key extraction
- Use getItemLayout when possible
- Optimize image loading and caching
- Use native driver for animations

```typescript
// ✅ DO: Memoized components
export const ListItem = React.memo<{
  item: Item;
  onPress: (id: string) => void;
}>(({ item, onPress }) => {
  const handlePress = useCallback(() => {
    onPress(item.id);
  }, [item.id, onPress]);
  
  return (
    <InteractiveCard onPress={handlePress}>
      <Layout.Stack spacing="sm">
        <Text variant="headline">{item.title}</Text>
        <Text variant="subhead" color="secondary">{item.subtitle}</Text>
      </Layout.Stack>
    </InteractiveCard>
  );
});

// ✅ DO: Optimized image component
export const OptimizedImage: React.FC<{
  uri: string;
  width: number;
  height: number;
  placeholder?: React.ReactNode;
}> = ({ uri, width, height, placeholder }) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  
  return (
    <View style={{ width, height }}>
      <Image
        source={{ uri }}
        style={{ width, height }}
        onLoad={() => setLoading(false)}
        onError={() => {
          setLoading(false);
          setError(true);
        }}
        resizeMode="cover"
      />
      {loading && placeholder && (
        <View style={[StyleSheet.absoluteFill, styles.placeholder]}>
          {placeholder}
        </View>
      )}
    </View>
  );
};
```

## **Accessibility Best Practices**
- Use semantic accessibility labels
- Implement proper accessibility roles
- Support VoiceOver navigation
- Provide accessibility hints
- Test with accessibility tools

```typescript
// ✅ DO: Accessible components
export const AccessibleButton: React.FC<ButtonProps & {
  accessibilityLabel: string;
  accessibilityHint?: string;
}> = ({ accessibilityLabel, accessibilityHint, ...props }) => (
  <Button
    {...props}
    accessibilityRole="button"
    accessibilityLabel={accessibilityLabel}
    accessibilityHint={accessibilityHint}
    accessibilityState={{
      disabled: props.disabled,
      busy: props.isLoading,
    }}
  />
);

// ✅ DO: Accessibility hooks
export const useAccessibility = () => {
  const [isScreenReaderEnabled, setIsScreenReaderEnabled] = useState(false);
  
  useEffect(() => {
    const subscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      setIsScreenReaderEnabled
    );
    
    AccessibilityInfo.isScreenReaderEnabled().then(setIsScreenReaderEnabled);
    
    return () => subscription.remove();
  }, []);
  
  const announceForAccessibility = useCallback((message: string) => {
    AccessibilityInfo.announceForAccessibility(message);
  }, []);
  
  return { isScreenReaderEnabled, announceForAccessibility };
};
```

## **Styling Best Practices**
- Use StyleSheet.create for better performance
- Implement theme switching capability
- Use consistent border radius values
- Apply proper shadow styles
- Use platform-specific styles when needed

```typescript
// ✅ DO: Consistent styling patterns
export const createStyles = (theme: typeof DesignSystem) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background.primary,
  },
  
  card: {
    backgroundColor: theme.colors.background.primary,
    borderRadius: 12,
    padding: theme.spacing.md,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 8,
      },
      android: {
        elevation: 4,
      },
    }),
  },
  
  button: {
    borderRadius: 8,
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
    minHeight: 44, // Minimum touch target size
  },
});

// ✅ DO: Theme provider pattern
export const ThemeProvider: React.FC<{
  children: React.ReactNode;
  theme?: 'light' | 'dark';
}> = ({ children, theme = 'light' }) => {
  const themeValue = useMemo(() => ({
    ...DesignSystem,
    colors: theme === 'dark' ? DarkDesignSystem.colors : DesignSystem.colors,
  }), [theme]);
  
  return (
    <ThemeContext.Provider value={themeValue}>
      {children}
    </ThemeContext.Provider>
  );
};
```
description:
globs:
alwaysApply: false
---
