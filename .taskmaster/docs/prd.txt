### **PRD: 시그널(Signal) - React Native & NestJS Edition**

> **문서 버전:** 2.0 (NestJS & RN Stack Ver.)
> **변경 이력:** v1.0 '시그널 스팟' 기획에서 '시그널 스파크' 트랙 추가 및 **NestJS/React Native 기술 스택 적용**
> **작성일:** 2025년 7월 7일
> **작성자:** Gemini (World's Best Planning Expert)

## **1. 제품 개요 (Product Overview)**

### **1.1. 문제 정의**
- 현대인들의 물리적 만남과 소통 기회 감소
- 기존 소셜 미디어의 피상적인 관계 형성
- 지역 기반 커뮤니티 소통의 부재

### **1.2. 제품 비전**
시그널(Signal)은 물리적 공간과 디지털 경험을 결합하여 진정한 인간 관계를 만드는 플랫폼입니다.

### **1.3. 2-Track 전략: 성장과 유지를 위한 시너지 엔진**
- **Track A (시그널 스팟)**: 공개/바이럴 엔진 - 지역 기반 쪽지 플랫폼
- **Track B (시그널 스파크)**: 비공개/리텐션 엔진 - 우연한 만남 감지 시스템

## **2. 목표 및 성공 지표 (Goals & Success Metrics)**

### **2.1. 플랫폼 목표**
- 월간 활성 사용자 100만 명 달성
- 사용자 리텐션 70% 이상 유지
- 일일 평균 사용 시간 20분 이상

### **2.2. Track A 목표**
- 주간 쪽지 작성 수 50만 개 이상
- 쪽지 조회율 80% 이상
- SNS 공유율 30% 이상

### **2.3. Track B 목표**
- 스파크 감지 정확도 85% 이상
- 매칭 성공률 60% 이상
- 1:1 채팅 전환율 40% 이상

## **3. 핵심 기능 명세 (Feature Specifications)**

### **3.1. 통합 경험: 두 트랙을 잇는 허브**

#### **3.1.1. 통합 피드 '오늘의 인연'**
- **설명:** 앱 실행 시 가장 먼저 보게 될 메인 화면. 사용자의 위치와 관심사를 기반으로 '시그널 스팟'의 인기/신규 쪽지와 나에게 발생한 '시그널 스파크' 로그가 통합된 형태로 노출된다.
- **프론트엔드 (React Native) 구현:**
  - `FlatList` 또는 `SectionList`를 활용하여 스팟과 스파크라는 이질적인 데이터를 단일 피드에서 효율적으로 렌더링
  - **Toss 앱 디자인 참고:** 카드 형태의 UI를 사용하여 스팟과 스파크 정보를 명확히 구분하되, `styled-components`를 통해 전체적인 톤앤매너는 통일
  - 스크롤 시 각기 다른 정보(지도 기반의 스팟, 로그 형태의 스파크)가 자연스럽게 로드되는 인터랙션을 구현

### **3.2. Track A: 시그널 스팟 (공개/바이럴 엔진)**

#### **3.2.1. 지도 기반 쪽지 시스템**
- **지도 기반 쪽지 작성:** `react-native-maps` 라이브러리를 사용하여 지도 UI를 구현하고, 사용자가 특정 위치에 핀을 찍어 쪽지를 남기도록 함
- **'나일지도?' 버튼:** 사용자의 터치 이벤트를 받아, 해당 쪽지 ID와 사용자 정보를 **NestJS API 서버**로 전송
- **감성 쪽지 카드 (SNS 공유):** `react-native-view-shot`을 활용하여 쪽지 컴포넌트를 이미지 파일로 캡처하고, `Share` API를 통해 인스타그램 스토리나 카카오톡으로 공유하는 기능 구현

#### **3.2.2. '성지' 시스템**
- **NestJS 백엔드**에서 특정 좌표 반경 내 쪽지 개수를 집계하여 '성지' 등급을 부여
- React Native 앱은 이 등급에 따라 지도 위의 아이콘을 다르게 렌더링

### **3.3. Track B: 시그널 스파크 (비공개/리텐션 엔진)**

#### **3.3.1. 컨셉 및 사용자 경험**
- 사용자의 위치와 취향을 기반으로 우연한 만남을 감지하는 시스템
- Privacy by Design 원칙 준수하여 개인정보 보호 최우선

#### **3.3.2. 동작 방식 (Privacy by Design 원칙 준수)**

##### **데이터 수집 (React Native & OS Level)**
- **위치:** `react-native-background-geolocation`과 같은 라이브러리를 사용하여 사용자의 명시적 동의 하에, OS(iOS/Android)가 제공하는 저전력 위치 수집 API를 활용
- **취향 (시그니처 커넥션):** 프로필 설정 시 입력한 '인생 영화', '최애 아티스트' 등의 데이터를 **NestJS 데이터베이스** 내 사용자 프로필에 저장

##### **스파크 감지 (NestJS Server-side Logic)**
- **기술:** **NestJS Scheduler (`@nestjs/schedule`)** 를 사용하여 특정 시간 간격(e.g., 10분마다)으로 백그라운드 잡(Job)을 실행
- **로직:**
  1. 백그라운드 잡이 최근 N분 동안 위치 로그가 쌓인 사용자 그룹을 추출
  2. 공간 인덱싱(e.g., PostGIS)이 적용된 DB 쿼리를 통해 물리적으로 근접했던 사용자 쌍(Pair)을 빠르게 필터링
  3. 필터링된 사용자 쌍에 대해 '시그니처 커넥션' 교집합을 검사
  4. 두 조건 모두 충족 시 '스파크' 이벤트 생성 후 DB에 저장하고, 각 사용자에게 푸시 알림 발송

##### **푸시 알림**
- **NestJS 백엔드**는 스파크 감지 시 FCM(Firebase Cloud Messaging) 또는 APNS(Apple Push Notification Service)로 푸시 요청
- **React Native 앱**은 `@react-native-firebase/messaging`을 통해 백그라운드/포그라운드 상태에서 푸시를 수신하고, '나의 스파크 로그' 화면으로 사용자를 안내

##### **비공개 시그널 및 매칭 (1:1 채팅)**
- 상호 '시그널 수락' 시, **NestJS의 WebSocket Gateway**를 통해 두 사용자 간의 Private한 1:1 채팅 채널(Room)을 생성
- React Native 앱에서는 `socket.io-client` 라이브러리를 사용하여 실시간으로 메시지를 주고받음

### **3.4. 시너지 기능: 컨텍스트 강화**
- 백엔드 로직에서 스파크 발생 위치와 스팟 위치를 비교하여 컨텍스트 정보를 추가 후 API 응답에 포함
- 사용자가 스파크가 발생한 위치 주변의 쪽지들을 쉽게 확인할 수 있도록 연동

## **4. 데이터 및 기술 스택 (NestJS & React Native Stack)**

### **4.1. Backend 기술 스택**
- **NestJS Framework:** TypeScript 기반의 모듈형 아키텍처
- **Node.js:** NestJS의 런타임 환경
- **PostgreSQL + PostGIS:** 위치 기반 쿼리 처리
- **TypeORM:** 데이터베이스 ORM
- **Passport.js (JWT):** 인증 시스템
- **NestJS WebSocket Gateway:** 실시간 채팅
- **NestJS Scheduler / Message Queue:** 백그라운드 작업 처리

### **4.2. Frontend 기술 스택**
- **React Native:** 크로스 플랫폼 모바일 앱 개발
- **TypeScript:** 타입 안정성
- **React Navigation:** 앱 내 네비게이션
- **React Query (TanStack Query):** 서버 상태 관리

### **4.3. Infrastructure**
- **AWS / GCP / Vercel:** 클라우드 인프라
- **RDS:** 데이터베이스 호스팅
- **S3:** 파일 저장소
- **CDN:** 콘텐츠 전송 네트워크

## **5. 릴리즈 전략 (Phased Rollout)**

### **5.1. Phase 1: MVP (최소 기능 제품)**
- 시그널 스팟 기본 기능 (지도 기반 쪽지 작성/조회)
- 기본 사용자 인증 시스템
- 간단한 프로필 설정

### **5.2. Phase 2: 스파크 시스템 도입**
- 위치 기반 매칭 시스템
- 푸시 알림 시스템
- 1:1 채팅 기능

### **5.3. Phase 3: 고도화**
- 성지 시스템
- SNS 공유 기능
- 통합 피드 '오늘의 인연'

## **6. 리스크 및 완화 방안**

### **6.1. 개인정보/프라이버시 리스크**
- **리스크:** 백그라운드 위치 추적에 대한 사용자의 거부감
- **완화 방안:** React Native 단에서 OS별 권한 요청 Flow를 사용자 친화적으로 상세히 설계

### **6.2. 기술적 리스크**
- **리스크:** 스마트폰 배터리 과다 소모
- **완화 방안:** `react-native-background-geolocation` 라이브러리의 정밀한 설정을 통해 위치 정보 수집 빈도, 정확도 등을 동적으로 제어

### **6.3. 성능 리스크**
- **리스크:** 스파크 매칭 알고리즘의 정확도 및 성능 이슈
- **완화 방안:** 알고리즘을 비동기 백그라운드 잡으로 분리하여 API 응답 시간에 영향을 주지 않도록 설계. PostGIS의 공간 인덱스를 적극 활용하여 쿼리 성능 최적화

### **6.4. 사용자 경험 리스크**
- **리스크:** 두 트랙의 성격이 달라 사용자에게 혼란을 줄 가능성
- **완화 방안:** 통합 피드를 통해 자연스러운 연결점 제공, 명확한 UI/UX 구분

## **7. 예상 개발 일정**

### **7.1. 준비 단계 (2주)**
- 프로젝트 환경 설정
- 기술 스택 선정 및 초기 설정
- 디자인 시스템 구축

### **7.2. Phase 1 개발 (8주)**
- 백엔드 API 기본 구조 구축
- React Native 앱 기본 프레임워크 구축
- 시그널 스팟 기능 구현

### **7.3. Phase 2 개발 (10주)**
- 스파크 시스템 구현
- 위치 기반 매칭 로직 개발
- 실시간 채팅 시스템 구축

### **7.4. Phase 3 개발 (6주)**
- 고도화 기능 추가
- 성능 최적화
- 사용자 테스트 및 버그 수정

## **8. 성공을 위한 핵심 요소**

### **8.1. 사용자 경험 (UX)**
- 직관적이고 간단한 인터페이스
- 빠른 로딩 시간과 원활한 성능
- 개인정보 보호에 대한 투명한 커뮤니케이션

### **8.2. 기술적 안정성**
- 확장 가능한 백엔드 아키텍처
- 효율적인 데이터베이스 설계
- 안정적인 실시간 통신 시스템

### **8.3. 커뮤니티 형성**
- 초기 사용자 확보 전략
- 바이럴 마케팅 요소 강화
- 지속적인 사용자 참여 유도 방안 